import datetime
from hashlib import sha256

# This file defines the class for a single block.

class Block:

    # Each individual block contains a timestamp of when it's created, a dictionary containing transactions,
    # the unique hash of the previous block, a nonce value - which is used to generate the hash value -, and 
    # a hash value generated by the .generate_hash() method.
    def __init__(self, transactions, previous_hash):
        self.time_stamp = datetime.datetime.now()
        self.transactions = transactions
        self.previous_hash = previous_hash
        self.nonce = 0
        self.hash = self.generate_hash()

    # The .generate_hash() combines all of the data within a block and produces a unique string
    # of fixed length
    def generate_hash(self):
        block_header = str(self.time_stamp) + str(self.transactions) +str(self.previous_hash) + str(self.nonce)
        block_hash = sha256(block_header.encode())
        return block_hash.hexdigest()

    # The .print_contents() method displays all the relevant data inside a given block.  
    def print_contents(self):
        print("timestamp:", self.time_stamp)
        print("transactions:", self.transactions)
        print("current hash:", self.generate_hash())
        print("previous hash:", self.previous_hash) 